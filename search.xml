<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[scrapy框架]]></title>
    <url>%2F2018%2F08%2F15%2Fscrapy%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[scrapy指令 scrapy startproject XXX [创建一个新的scrapy工程] scrapy genspider [options] [创建一个爬虫文件, 在spider文件夹下] scrapy crawl XXXSpider 运行某个爬虫 scrapy list 显示当前工程中的所有爬虫 响应对象[scrapy.http.response.html.HtmlResponse] .xpath().extract() [返回list类型] item和itempipelinemiddlewares 下载中间件DownLoaderMiddleWare 123456def process_request(self, request, spider): 对request进行处理[可选择一系列返回值]def process_response(self, request, response, spider): 对response进行处理[可选择一系列返回值]&lt;class &apos;scrapy.http.request.Request&apos;&gt; request对象&lt;class &apos;scrapy.http.response.html.HtmlResponse&apos;&gt; response对象&lt;class &apos;ProxyPool.spiders.ProxySpider.ProxyspiderSpider&apos;&gt; spider对象 settings文件配置 DEFAULT_REQUEST_HEADERS [配置请求头信息, 如User-Agent]1&apos;User-Agent&apos; : &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;]]></content>
      <tags>
        <tag>爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyTorch]]></title>
    <url>%2F2018%2F08%2F13%2FPyTorch%2F</url>
    <content type="text"><![CDATA[torch tensor与numpy ndarray的转化[tensor与ndarray相似] tensor.numpy() tensor转换成ndarray tensor.from_numpy(ndarray) ndarray转换成tensor [注意指定dtype] tensor上的基本操作与运算 tensor.mean(dim=) dim=0每列 dim=1每行abs(), ceil(), floor(), round()flatten() 拉平成one dimtorch.matmul(), torch.mm(), troch.dot(), tensor.dot()tensor.min(dim), tensor.max(dim)tensor.argmax(dim), tensor.argmin(dim)tensor.size(dim) 某个维度的大小tensor.view() 改变维度(可以出入-1表示batch)torch.stack([list of tensor], dim=) 堆叠 torch搭建network torch.nn模块包含与神经网络相关的结构 troch.Sequential() 包裹一个功能完整的网络结构 torch.nn.Linear() 线性结构 torch.nn.ReLU() 激励函数(…) torch.optim.SGD 优化器(…) torch.nn.MSELoss() 损失函数(…) torch.nn.CrossEntropy() 函数的labels不是onehot形式的 torch.nn.Conv2d() torch.nn.MaxPool2d() troch.nn.LSTM(batch_first=True, …) [batch_first important] 将网络定义成class 继承tensor.nn.Moduleinit(self)方法中定义网络结构forward(self, x) 方法中定义前向传播, 并返回前向传播结果 nn.rnn() 模型的保存和加载 torch.save(net, ‘net.pkl’) net = torch.load(‘net.pkl’) 只保存模型的参数[需要重新定义网络的结构] torch.save(net.state_dict(), ‘net_parameter.pkl’)define net strcture as netnet.load_state_dict(torch.load(‘net_parameters.pkl’)) minibatch import torch.utils.data as Data 定义DataSet torch_dataset = data.TensorDataset(x, y) 定义Loader loader = data.DataLoader(dataset=, batch_size=, shuffle=,…)对loder进行迭代每次返回一个batch的数据 ###]]></content>
      <tags>
        <tag>pytorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫基础]]></title>
    <url>%2F2018%2F08%2F13%2Fpython%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[requests 库 requests.get(url=, headers=) headers可以设置User-Agent等请求头信息 设置代理 12345678910proxies=&#123; &quot;http&quot;: &apos;ip:port&apos; &quot;https&quot;: &apos;ip&amp;port&apos;&#125;SOCKS5代理(requests 2.12.x支持)proxies=&#123; &quot;http&quot; : &quot;socks5://127.0.0.1:1080&quot; &quot;https&quot; : &quot;socks5://127.0.0.1:1080&quot;&#125;r = requests.get(url=url, headers=header,proxies=proxy) 设置请求超时时间 requests.get(url=, headers=, proxies=, timeout=) 单位是秒 requests.models.Response requests.get() 返回对象.status_code属性表示状态码.text属性表示文本内容.encoding属性属性指明编解码.apparent_encoding属性根据内容推断编码方式 xpath解析 123from lxml import etreextree = etree.HTML(html)xtree.xpath(xpath) xpath 获取标签内的文本text() [//table/td[1]/text()] 获取标签的属性值 @attribute_name [//a[class=’next’]/@href] urllib.request(urllib2 in py2) urlopen() urllib parse.quote(string=, encoding=) 对url进行编码 parse.unquote(string=, encoding=) 对url进行解码 1234parse.quote(string=&apos;中国&apos;, encoding=&apos;utf-8&apos;)&apos;%E4%B8%AD%E5%9B%BD&apos;parse.unquote(string=&apos;%E4%B8%AD%E5%9B%BD&apos;, encoding=&apos;utf-8&apos;)&apos;中国&apos;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>爬虫</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git分支相关]]></title>
    <url>%2F2018%2F07%2F11%2FGit%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[撤销修改 撤销暂存区add(撤销git add) 1git reset HEAD &lt;file&gt;... 恢复为修改但为add的状态 撤销工作目录的修改 1git checkout -- &lt;file&gt;... 将工作目录的修改撤销 分支 新建分支 123git branch newBranchgit checkout -b newBranch 创建新分支并转到新分支下git checkout newBranch 切换分支 分支的使用 在master分支上开发完成后，项目可能上线，为了不影响master分支的内容，新建一个newBranch开发新的特性，新分支下进行的变动不会影响到master分支，在开发新分支的过程中原来的分支可能会发现bug，切换回master分支，使用git checkout head撤销修改，并修改bug后提交。当newBranch的新特性开发完成后将此分支在合并到master分支上]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim编辑器的快捷键]]></title>
    <url>%2F2018%2F07%2F10%2Fvimimm%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[yy 复制一行 p 粘贴 dd 删除一行 vi +n file 打开文件并定位光标到第n行 vi + file 打开文件并定位光标到最后一行 vi +/String file 打开文件并定位光标到第一个String出现的位置 一般模式 /String 向下搜索 ?String 向上搜索]]></content>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的坑]]></title>
    <url>%2F2018%2F07%2F10%2FMySQL%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[mysql启动、停止和重启123sudo /etc/init.d/mysql startsudo /etc/init.d/mysql stopsudo /etc/init.d/mysql restart Window下Java程序访问虚拟机中的MySQL+ mysql 数据库中的user表的root用户对应的host改为% 1234Could not get JDBC Connection; nested exception is java.sql.SQLException: null, message from server: &quot;Host &apos;192.168.29.1&apos; is not allowed to connect to this MySQL server&quot;update user set host=&quot;%&quot; where user=&quot;root&quot;;flush privileges; + 修改bind-address 12/etc/mysql/mysql.conf.d/mysqld.cnfbind-address = 0.0.0.0 + MySQL忘记密码或者因为修改mysql.user导致无法登陆解决方法 https://blog.csdn.net/sinat_34820292/article/details/78582696 + spring-jdbc JDBCTemplate的query方法的回调RowCallbackHandler的ResultSet不需要调用next方法]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
