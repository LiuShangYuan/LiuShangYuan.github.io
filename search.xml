<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[常用快捷键]]></title>
    <url>%2F2018%2F09%2F22%2F%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[IDEAshift + alt + insert 进入和退出列选择模式 Ctrl + Shift + Enter 补全语句 Shift + Enter 再当前行下新开一行 File -&gt; Settings -&gt; Live Templates 自定义代码模板 双击Shift 全局搜索 Ctrl + Shift + V 显示历史的复制记录 Ctrl + Alt + T 包裹代码块 linux命令行Ctrl + A 回到行首 Ctrl + E 回到行尾 WindowsWin + P 屏幕 Win + 数字 切换当前窗口 Win + L 锁屏 Ctrl + Alt + 方向键 旋转屏幕 Ctrl + Win + 左右键 切换桌面]]></content>
      <tags>
        <tag>快捷键</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shell脚本]]></title>
    <url>%2F2018%2F09%2F21%2FShell%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[运行Shell脚本 作为可执行程序 12chmod +x ./test.sh #使脚本具有执行权限./test.sh #执行脚本 作为解释器参数 123// 以此方式运行时再第一行不需要加#!/bin/bash/bin/sh test.sh/bin/php test.php Shell变量 定义变量 定义变量时不需要加$符号 给变量赋值时等号前后不要加空格 使用变量 123// 使用$引用已经定义的变量var1 = &quot;helloworld&quot;echo $var1 或 echo $&#123;var1&#125; 只读变量readonly 删除变量 变量类型 字符串 双引号和单引号区别 字符串拼接 1234567891011121314#!/bin/bashyour_name=&quot;runoob&quot;# 使用双引号拼接greeting=&quot;hello, &quot;$your_name&quot; !&quot;greeting_1=&quot;hello, $&#123;your_name&#125; !&quot;echo $greeting $greeting_1# 使用单引号拼接greeting_2=&apos;hello, &apos;$your_name&apos; !&apos;greeting_3=&apos;hello, $&#123;your_name&#125; !&apos;echo $greeting_2 $greeting_3output: hello, runoob ! hello, runoob ! hello, runoob ! hello, $&#123;your_name&#125; ! 字符串长度 1$&#123;#str1&#125; 截取子串 Shell数组12345678// 定义array_name=(v1 v2 v3 v4 ...) //使用空格进行分隔// 访问$&#123;array_name[index]&#125;// 获取所有元素$&#123;array_name[@]&#125; 或者 $&#123;array_name[*]&#125;// 获取数组的长度$&#123;#array_name[@]&#125; 或者 $&#123;#array_name[*]&#125; 注释 单行注释 [使用#] 多行注释 1234:&lt;&lt; eofeof# eof也可以替换成其他符号 Shell传递参数123$n用来接收执行脚本时传递的参数$0为脚本名称$#为传递的参数个数 Shell基本运算符 算术运算符 123456+, -, *, /, ==, =, !=, %[ $a == $b ] //运算符的两端必须要有空格, 中括号两端也必须要有空格`expr 2 + 2` //2 + 2运算符与运算数两端必须以空格隔开// 乘号(*)前边必须加反斜杠(\)才能实现乘法运算； 关系运算符[只支持数字] 123-eq, -ne, -gt, -lt, -ge, -leeg: [ $a -eq $b ] 布尔运算符 1![非], -o[或], -a[与] 逻辑运算符 1&amp;&amp;, || 字符串运算符 1234=, !=, -z, -n, str-z 检测字符串长度是否为0，为0返回true [ -z $a ]-n 检测字符串长度是否为0，不为0返回true [ -n $b ]str 检测字符串是否为空，不为空返回 true [ str $a ] 文件测试运算符1234567-d-f-r-w-x-s-e 检测文件是否存在，存在返回true [ -e $file ] echo命令 显示换行 echo -e “OK !\n” 重定向 echo “hello shell” &gt; myfile 显示命令执行结果 1echo `date` printf命令 命令格式123printf &quot;%-10s %-8s %-4s\n&quot; 郭靖 男 66.1234- 表示左对齐，没有时为右对齐%-4.2f 指格式化为小数，其中.2指保留2位小数 test命令 感觉没啥用处 let命令 [执行表达式]1234let n++let n+=10let n=n+2// 不需要加$来引用变量 流程控制123456789101112if xxxthen xxxxxelifthen xxxxxelse xxxxxfiif xxxxx; then xxxxx; fi //写成一行的形式 for循环 1234567for var in item1 item2 ... itemNdo command1 command2 ... commandNdone while循环 1234while conditiondo commanddone 无限循环 123456789while :do commanddone或者while truedo commanddone until循环 12345// 不断循环直到condition为true时循环结束until conditiondo commanddone case语句(类似与switch语句) 123456789101112131415echo &apos;输入 1 到 4 之间的数字:&apos;echo &apos;你输入的数字为:&apos;read aNumcase $aNum in 1) echo &apos;你选择了 1&apos; ;; 2) echo &apos;你选择了 2&apos; ;; 3) echo &apos;你选择了 3&apos; ;; 4) echo &apos;你选择了 4&apos; ;; *) echo &apos;你没有输入 1 到 4 之间的数字&apos; ;;esac 函数输入/输出和重定向12345默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息 /dev/null 文件 如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null： Shell文件包含 . filename source filename]]></content>
  </entry>
  <entry>
    <title><![CDATA[Java并发编程]]></title>
    <url>%2F2018%2F09%2F11%2FJava%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[Java内存模型[1.5时被重新修订] 工作内存(每个线程独立的内存区域) 主内存(线程共享的变量) 每个线程会将主内存中的共享变量复制一份到自己的工作内存中 synchronized &amp; volatile synchronized同步 synchronized可以修饰方法或代码块被synchronized关键字修饰的代码同一时刻只能被一个线程访问 一个同步块可以保证在同一时刻仅有一个线程可以进入代码的临界区。同步块还可以保证代码块中所有被访问的变量将会从主存中读入，当线程退出同步代码块时，所有被更新的变量都会被刷新回主存中去，不管这个变量是否被声明为volatile。 volatile可见性 两个CPU并行执行两个线程, CPU对内存的数据进行了缓存 原子性 eg:32位环境中long类型(64位)的读写不是原子性的 有序性[指令重排] wait、notify、notifyAll、sleep wait 会释放持有的锁 必须在synchronized语句中调用 notify 不会立刻释放持有的锁 随机唤醒一个在该对象上等待的线程 notifyAll 唤醒在改对象上等待的所有线程 sleep 不会释放锁 Thread join 在B线程中调用A线程的join方法, 会在A线程执行完成之后才能继续B线程的执行本质是让被调用线程在当前线程实例对象上wait yield 暂停当前正在执行的线程，并执行其他线程[让出CPU]。(可能没有效果) 线程中断 interrupt 设置线程的中断标记位isInterrupted 检查线程的中断标记位Thread.interrupted 判断是否被中断, 并清除中断状态 对一个处于阻塞状态的线程调用interrput方法会抛出InterruptedException异常, 并清除中断标记位http://www.cnblogs.com/skywang12345/p/3479949.html 重入锁 ReentrantLock java.util.concurrent.locks.ReentrantLock 中断响应 中断正在等待获得锁对象的线程lock.lockInterruptibly 申请锁(可被中断) tryLock(时长, 时间单位) 锁申请等待限时 tryLock() 尝试获取锁成功返回true失败返回false, 不进行等待 Condition条件 lock.newConditionawait 释放锁signal、signal Semaphore 信号量 ReadWriteLock 读写锁 读读线程可以并行, 读写或写写线程是互斥的 CountDownLatch倒计时器 控制某一线程在倒计时完成后再执行CountDownLatch(int count) 构造计时器countDown() 计时减一await() 等待计时完成 CyclicBarrier await() 等待所有线程集合 LockSupport线程阻塞工具类 park() 静态方法[阻塞线程]unpark(thread)类似信号量LockSupport为每个线程设置了一个许可, pack消费这个 许可, 许可不可用时线程阻塞, unpark将许可变为可用。定时阻塞 线程池 Executors 工厂 ExecutorService ThreadPoolExecutor FixedThreadPool、 SingleThreadPool、 CachedThreadPool都是通过ThreadPoolExecutor构造的线程数、最大线程数、超过线程数时空闲线程的存活时间、任务队列、线程工厂ThreadPoolExecutor.Worker[内部类]线程池中工作线程即为ThreadPoolExecutor.Worker的实例 ThreadFactory newThread() 异常堆栈 并发容器 ConcurrentHashMap CopyOnWriteArrayList ConcurrentLinkedQueue BlockingQueue ConcurrentSkipListMap 使用Collections.synchronizedXXX()]]></content>
      <tags>
        <tag>java</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[scrapy框架]]></title>
    <url>%2F2018%2F08%2F15%2Fscrapy%E6%A1%86%E6%9E%B6%2F</url>
    <content type="text"><![CDATA[scrapy指令 scrapy startproject XXX [创建一个新的scrapy工程] scrapy genspider [options] [创建一个爬虫文件, 在spider文件夹下] scrapy crawl XXXSpider 运行某个爬虫 scrapy list 显示当前工程中的所有爬虫 响应对象[scrapy.http.response.html.HtmlResponse] .xpath().extract() [返回list类型] item和itempipeline item [相当于字典, 存储爬去的内容] 123456789继承scrapy.Itemip = scrapy.Field()port = scrapy.Field()types = scrapy.Field()item = XXXItem()item[&apos;ip&apos;] = xxx...yield item 会被ItemPipeline所处理 itempipeline对Item进行进一步处理的地方 middlewares 下载中间件DownLoaderMiddleWare 123456def process_request(self, request, spider): 对request进行处理[可选择一系列返回值]def process_response(self, request, response, spider): 对response进行处理[可选择一系列返回值]&lt;class &apos;scrapy.http.request.Request&apos;&gt; request对象&lt;class &apos;scrapy.http.response.html.HtmlResponse&apos;&gt; response对象&lt;class &apos;ProxyPool.spiders.ProxySpider.ProxyspiderSpider&apos;&gt; spider对象 settings文件配置 DEFAULT_REQUEST_HEADERS [配置请求头信息, 如User-Agent]1&apos;User-Agent&apos; : &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36&apos;]]></content>
      <tags>
        <tag>爬虫</tag>
        <tag>scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PyTorch]]></title>
    <url>%2F2018%2F08%2F13%2FPyTorch%2F</url>
    <content type="text"><![CDATA[torch tensor与numpy ndarray的转化[tensor与ndarray相似] tensor.numpy() tensor转换成ndarray tensor.from_numpy(ndarray) ndarray转换成tensor [注意指定dtype] tensor上的基本操作与运算 tensor.mean(dim=) dim=0每列 dim=1每行abs(), ceil(), floor(), round()flatten() 拉平成one dimtorch.matmul(), torch.mm(), troch.dot(), tensor.dot()tensor.min(dim), tensor.max(dim)tensor.argmax(dim), tensor.argmin(dim)tensor.size(dim) 某个维度的大小tensor.view() 改变维度(可以出入-1表示batch)torch.stack([list of tensor], dim=) 堆叠torch.bmm(batch1, batch2)123bmm()是在两个batch上执行乘法的操作batch1 and batch2 must be 3-D tensors each containing the same number of matrices.If batch1 is a (b×n×m) tensor, batch2 is a (b×m×p) tensor, out will be a (b×n×p) tensor. torch搭建network torch.nn模块包含与神经网络相关的结构 troch.Sequential() 包裹一个功能完整的网络结构 torch.nn.Linear() 线性结构 torch.nn.ReLU() 激励函数(…) torch.optim.SGD 优化器(…) torch.nn.MSELoss() 损失函数(…) torch.nn.CrossEntropy() 函数的labels不是onehot形式的 torch.nn.Conv2d() torch.nn.MaxPool2d() troch.nn.LSTM(batch_first=True, …) [batch_first important] 将网络定义成class 继承tensor.nn.Moduleinit(self)方法中定义网络结构forward(self, x) 方法中定义前向传播, 并返回前向传播结果 nn.rnn() 模型的保存和加载 torch.save(net, ‘net.pkl’) net = torch.load(‘net.pkl’) 只保存模型的参数[需要重新定义网络的结构] torch.save(net.state_dict(), ‘net_parameter.pkl’)define net strcture as netnet.load_state_dict(torch.load(‘net_parameters.pkl’)) minibatch import torch.utils.data as Data 定义DataSet torch_dataset = data.TensorDataset(x, y) 定义Loader loader = data.DataLoader(dataset=, batch_size=, shuffle=,…)对loder进行迭代每次返回一个batch的数据 pack_padded_sequence &amp;&amp; pad_packed_sequence pack_padded_sequence(input, lengths, batch_first)1234567// 使用batch训练的biRNN// 将同一个batch里进行padding操作过后的数据进行压缩input (Variable) – 变长序列 被填充后的 batchlengths (list[int]) – Variable 中 每个序列的长度batch_first (bool, optional) – 如果是True，input的形状应该是B*T*size]]></content>
      <tags>
        <tag>pytorch</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python爬虫基础]]></title>
    <url>%2F2018%2F08%2F13%2Fpython%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%2F</url>
    <content type="text"><![CDATA[requests 库 requests.get(url=, headers=) headers可以设置User-Agent等请求头信息 设置代理 12345678910proxies=&#123; &quot;http&quot;: &apos;ip:port&apos; &quot;https&quot;: &apos;ip:port&apos;&#125;SOCKS5代理(requests 2.12.x支持)proxies=&#123; &quot;http&quot; : &quot;socks5://127.0.0.1:1080&quot; &quot;https&quot; : &quot;socks5://127.0.0.1:1080&quot;&#125;r = requests.get(url=url, headers=header,proxies=proxy) 设置请求超时时间 requests.get(url=, headers=, proxies=, timeout=) 单位是秒 requests.models.Response requests.get() 返回对象.status_code属性表示状态码.text属性表示文本内容.encoding属性属性指明编解码.apparent_encoding属性根据内容推断编码方式 xpath解析 123from lxml import etreextree = etree.HTML(html)xtree.xpath(xpath) xpath 获取标签内的文本text() [//table/td[1]/text()] 获取标签的属性值 @attribute_name [//a[class=’next’]/@href] urllib.request(urllib2 in py2) urlopen() urllib parse.quote(string=, encoding=) 对url进行编码 parse.unquote(string=, encoding=) 对url进行解码 1234parse.quote(string=&apos;中国&apos;, encoding=&apos;utf-8&apos;)&apos;%E4%B8%AD%E5%9B%BD&apos;parse.unquote(string=&apos;%E4%B8%AD%E5%9B%BD&apos;, encoding=&apos;utf-8&apos;)&apos;中国&apos;]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python3</tag>
        <tag>爬虫</tag>
        <tag>requests</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git分支相关]]></title>
    <url>%2F2018%2F07%2F11%2FGit%E5%88%86%E6%94%AF%E7%9B%B8%E5%85%B3%2F</url>
    <content type="text"><![CDATA[撤销修改 撤销暂存区add(撤销git add) 1git reset HEAD &lt;file&gt;... 恢复为修改但为add的状态 撤销工作目录的修改 1git checkout -- &lt;file&gt;... 将工作目录的修改撤销 分支 新建分支 123git branch newBranchgit checkout -b newBranch 创建新分支并转到新分支下git checkout newBranch 切换分支 分支的使用 在master分支上开发完成后，项目可能上线，为了不影响master分支的内容，新建一个newBranch开发新的特性，新分支下进行的变动不会影响到master分支，在开发新分支的过程中原来的分支可能会发现bug，切换回master分支，使用git checkout head撤销修改，并修改bug后提交。当newBranch的新特性开发完成后将此分支在合并到master分支上]]></content>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim编辑器的快捷键]]></title>
    <url>%2F2018%2F07%2F10%2Fvim%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[yy 复制一行 p 粘贴 dd 删除一行 vi +n file 打开文件并定位光标到第n行 vi + file 打开文件并定位光标到最后一行 vi +/String file 打开文件并定位光标到第一个String出现的位置 一般模式 /String 向下搜索 ?String 向上搜索 n/N 配合上面两个搜索使用, n表示继续上面的动作, N表示执行上面动作的相反动作 eg: 执行/String 后按下n表示继续向下查找, 按N表示向上查找 n + space 光标向后移动n位 0回到行首、$回到行尾 n + Enter光标向下移动n行]]></content>
      <tags>
        <tag>linux</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL的坑]]></title>
    <url>%2F2018%2F07%2F10%2FMySQL%E7%9A%84%E5%9D%91%2F</url>
    <content type="text"><![CDATA[mysql启动、停止和重启123sudo /etc/init.d/mysql startsudo /etc/init.d/mysql stopsudo /etc/init.d/mysql restart Window下Java程序访问虚拟机中的MySQL+ mysql 数据库中的user表的root用户对应的host改为% 1234Could not get JDBC Connection; nested exception is java.sql.SQLException: null, message from server: &quot;Host &apos;192.168.29.1&apos; is not allowed to connect to this MySQL server&quot;update user set host=&quot;%&quot; where user=&quot;root&quot;;flush privileges; + 修改bind-address 12/etc/mysql/mysql.conf.d/mysqld.cnfbind-address = 0.0.0.0 + MySQL忘记密码或者因为修改mysql.user导致无法登陆解决方法 https://blog.csdn.net/sinat_34820292/article/details/78582696 + spring-jdbc JDBCTemplate的query方法的回调RowCallbackHandler的ResultSet不需要调用next方法]]></content>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F07%2F09%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
